
handin3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f48  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ca3  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047d  00000000  00000000  00001f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a8  00000000  00000000  00002424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002a7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	42 d0       	rcall	.+132    	; 0x17a <main>
  f6:	7f c0       	rjmp	.+254    	; 0x1f6 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <init_keys>:

#include <avr/io.h>

void init_keys()
{
	DDRC &= ~(_BV(PINC0) | _BV(PINC1) | _BV(PINC2) | _BV(PINC3) | _BV(PINC4) | _BV(PINC5));
  fa:	87 b1       	in	r24, 0x07	; 7
  fc:	80 7c       	andi	r24, 0xC0	; 192
  fe:	87 b9       	out	0x07, r24	; 7
	// Set PORTC 0-5 to pull up on input
	PORTC |= _BV(PINC0) | _BV(PINC1) | _BV(PINC2) | _BV(PINC3) | _BV(PINC4) | _BV(PINC5);
 100:	88 b1       	in	r24, 0x08	; 8
 102:	8f 63       	ori	r24, 0x3F	; 63
 104:	88 b9       	out	0x08, r24	; 8
 106:	08 95       	ret

00000108 <get_key>:
}

uint8_t get_key(uint8_t key_no)// key_no [1..6], return true if key pressed
{
	uint8_t statut = PINC & _BV(key_no - 1);
 108:	46 b1       	in	r20, 0x06	; 6
 10a:	28 2f       	mov	r18, r24
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <get_key+0x14>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	2a 95       	dec	r18
 11e:	e2 f7       	brpl	.-8      	; 0x118 <get_key+0x10>
 120:	84 23       	and	r24, r20
	if (statut == 0)
 122:	11 f4       	brne	.+4      	; 0x128 <get_key+0x20>
	{
		return 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	08 95       	ret
	}
	else
	{
		return 0;
 128:	80 e0       	ldi	r24, 0x00	; 0
	}
 12a:	08 95       	ret

0000012c <inits_leds>:
 */ 

#include <avr/io.h>

void inits_leds() {
	DDRA = 0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFF;
 130:	82 b9       	out	0x02, r24	; 2
 132:	08 95       	ret

00000134 <set_led>:
}

void set_led(uint8_t led_no, uint8_t state) {
	if (state == 1) {
 134:	61 30       	cpi	r22, 0x01	; 1
 136:	81 f4       	brne	.+32     	; 0x158 <set_led+0x24>
		PORTA &= ~(1 << led_no-1);
 138:	42 b1       	in	r20, 0x02	; 2
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <set_led+0x16>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	8a 95       	dec	r24
 14c:	e2 f7       	brpl	.-8      	; 0x146 <set_led+0x12>
 14e:	cb 01       	movw	r24, r22
 150:	80 95       	com	r24
 152:	84 23       	and	r24, r20
 154:	82 b9       	out	0x02, r24	; 2
 156:	08 95       	ret
	}
	else if (state == 0) {
 158:	61 11       	cpse	r22, r1
 15a:	0e c0       	rjmp	.+28     	; 0x178 <set_led+0x44>
		PORTA |= 1 << led_no-1;
 15c:	42 b1       	in	r20, 0x02	; 2
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	b9 01       	movw	r22, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <set_led+0x3a>
 16a:	66 0f       	add	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <set_led+0x36>
 172:	cb 01       	movw	r24, r22
 174:	84 2b       	or	r24, r20
 176:	82 b9       	out	0x02, r24	; 2
 178:	08 95       	ret

0000017a <main>:


int main(void)
{
    /* Replace with your application code */
	init_keys();
 17a:	bf df       	rcall	.-130    	; 0xfa <init_keys>
	inits_leds();
 17c:	d7 df       	rcall	.-82     	; 0x12c <inits_leds>
    while (1) 
    {
		//LED1 --> AND
		set_led(1,get_key(1)&get_key(2));
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	c3 df       	rcall	.-122    	; 0x108 <get_key>
 182:	c8 2f       	mov	r28, r24
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	c0 df       	rcall	.-128    	; 0x108 <get_key>
 188:	6c 2f       	mov	r22, r28
 18a:	68 23       	and	r22, r24
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	d2 df       	rcall	.-92     	; 0x134 <set_led>
		//LED2 --> OR
		set_led(2,get_key(1)|get_key(2));
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	ba df       	rcall	.-140    	; 0x108 <get_key>
 194:	c8 2f       	mov	r28, r24
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	b7 df       	rcall	.-146    	; 0x108 <get_key>
 19a:	6c 2f       	mov	r22, r28
 19c:	68 2b       	or	r22, r24
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	c9 df       	rcall	.-110    	; 0x134 <set_led>
		//LED3 --> XOR
		set_led(3,get_key(1)^get_key(2));
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	b1 df       	rcall	.-158    	; 0x108 <get_key>
 1a6:	c8 2f       	mov	r28, r24
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	ae df       	rcall	.-164    	; 0x108 <get_key>
 1ac:	6c 2f       	mov	r22, r28
 1ae:	68 27       	eor	r22, r24
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	c0 df       	rcall	.-128    	; 0x134 <set_led>
		//LED4 --> NAND
		set_led(4,!(get_key(1)&get_key(2)));
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	a8 df       	rcall	.-176    	; 0x108 <get_key>
 1b8:	c8 2f       	mov	r28, r24
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	a5 df       	rcall	.-182    	; 0x108 <get_key>
 1be:	8c 23       	and	r24, r28
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <main+0x4c>
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	b5 df       	rcall	.-150    	; 0x134 <set_led>
		//LED5 --> NOR
		set_led(5,!(get_key(1)|get_key(2)));
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	9d df       	rcall	.-198    	; 0x108 <get_key>
 1ce:	c8 2f       	mov	r28, r24
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	9a df       	rcall	.-204    	; 0x108 <get_key>
 1d4:	8c 2b       	or	r24, r28
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	09 f0       	breq	.+2      	; 0x1dc <main+0x62>
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	aa df       	rcall	.-172    	; 0x134 <set_led>
 1e0:	81 e0       	ldi	r24, 0x01	; 1
		//LED6 --> NXOR
		set_led(6,!(get_key(1)^get_key(2)));
 1e2:	92 df       	rcall	.-220    	; 0x108 <get_key>
 1e4:	c8 2f       	mov	r28, r24
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	8f df       	rcall	.-226    	; 0x108 <get_key>
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	c8 13       	cpse	r28, r24
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	a0 df       	rcall	.-192    	; 0x134 <set_led>
 1f4:	c4 cf       	rjmp	.-120    	; 0x17e <main+0x4>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
